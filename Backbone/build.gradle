/* Define each version code component separately to facilitate cleaner version increments.
   Suggestion courtesy of Jake Wharton:
   https://plus.google.com/108284392618554783657/posts/6f5TcVPRZij */
def versionMajor = 0
def versionMinor = 0
def versionPatch = 0
def versionBuild = 3 // bump for dogfood builds, public betas, etc.

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
    }
}
apply plugin: 'android'

/* mavenCentral() is specified at this level in addition to the buildscript block above so that
   Gradle knows which repository to use when resolving the dependancies listed below.  See answer in
   http://stackoverflow.com/questions/16671277/maven-dependencies-with-android-studio-gradle */
repositories {
    mavenCentral()
}

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile 'de.greenrobot:eventbus:2.2.0'
    compile files('libs/dashclock-api-r2.0.jar')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    final SEARCHES_PROVIDER_DEBUG = "me.toolify.backbone.debug.providers.recentsearches"
    final SEARCHES_PROVIDER_RELEASE = "me.toolify.backbone.providers.recentsearches"
    final SEARCHES_PROVIDER_ALPHA = "me.toolify.backbone.alpha.providers.recentsearches"

    final BOOKMARKS_PROVIDER_DEBUG = "me.toolify.backbone.debug.providers.bookmarks"
    final BOOKMARKS_PROVIDER_RELEASE = "me.toolify.backbone.providers.bookmarks"
    final BOOKMARKS_PROVIDER_ALPHA = "me.toolify.backbone.alpha.providers.bookmarks"

    defaultConfig {
        packageName "me.toolify.backbone"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        minSdkVersion 14
        targetSdkVersion 17
    }

    /* Define a separate signing config for release builds, and we'll load the specifics in later
       if the Toolify private credentials are present  */
    signingConfigs {
        release
    }

    /* The buildConfig strings below allow content providers for each of the specified
       build types to be simultaneously installed.  If we did not do this, debug and alpha builds
       would have content providers with the same package name as the release version, and could not
       be installed side-by-side.  Courtesy of Cyril Mottier:
       https://plus.google.com/118417777153109946393/posts/EATUmhntaCQ */
    buildTypes {
        debug {
            buildConfig "public static final String SEARCHES_PROVIDER_AUTHORITY = \"" + SEARCHES_PROVIDER_DEBUG + "\";" +
                        "public static final String BOOKMARKS_PROVIDER_AUTHORITY = \"" + BOOKMARKS_PROVIDER_DEBUG + "\";"
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            buildConfig "public static final String SEARCHES_PROVIDER_AUTHORITY = \"" + SEARCHES_PROVIDER_RELEASE + "\";" +
                        "public static final String BOOKMARKS_PROVIDER_AUTHORITY = \"" + BOOKMARKS_PROVIDER_RELEASE + "\";"
            signingConfig signingConfigs.release
        }

        alpha.initWith(buildTypes.release) // base alpha buildType on release buildType
        alpha {
            buildConfig "public static final String SEARCHES_PROVIDER_AUTHORITY = \"" + SEARCHES_PROVIDER_ALPHA + "\";" +
                        "public static final String BOOKMARKS_PROVIDER_AUTHORITY = \"" + BOOKMARKS_PROVIDER_ALPHA + "\";"
            packageNameSuffix ".alpha"
            versionNameSuffix "-alpha"
        }
    }

    /* Plug in private keystore credentials if they exist
       ==================================================
       Note! A gradle.properties (private and not checked into source control) file at the root of
       the project contains the properties referenced below.  Building the Debug variant will work
       without the file, but release and alpha will not until the properties file and its
       referenced keystore file are present
       ================================================== */
    if (project.hasProperty('storeFile') && project.hasProperty('storePassword')
            && project.hasProperty('keyAlias') && project.hasProperty('keyPassword')) {

        if (project.hasProperty('storeFile')) {
            signingConfigs.release.storeFile = file(storeFile)
        }

        if (project.hasProperty('storePassword')) {
            signingConfigs.release.storePassword = storePassword
        }

        if (project.hasProperty('keyAlias')) {
            signingConfigs.release.keyAlias = keyAlias
        }

        if (project.hasProperty('keyPassword')) {
            signingConfigs.release.keyPassword = keyPassword
        }
    }

    sourceSets {
        main {
            resources.srcDirs = ['libs/color-picker-view/src','libs/android-syntax-highlight/src','themes/src']
        }

        // Merge in build type specific resources
        debug {
            res.srcDirs = [
                    'src/main/res',
                    'src/debug/res']
        }

        release {
            res.srcDirs = [
                    'src/main/res',
                    'src/release/res']
        }

        alpha {
            res.srcDirs = [
                    'src/main/res',
                    'src/alpha/res']
        }
    }

    /* Now that each of the Android build types have been defined (including all of the background
       stuff that is run from the gradle android plugin), go back in and change the
       outputFile name of each build type to match template: "Backbone-v0.0.0.0-alpha" */
    android.applicationVariants.all { variant ->

        /* Define the outputFile names here.  Alpha and debug builds are assigned corresponding
           suffixes, and release has no suffix */
        def newName
        if (variant.buildType.versionNameSuffix) {
            newName = "Backbone-v${android.defaultConfig.versionName}${variant.buildType.versionNameSuffix}.apk"
        } else {
            newName = "Backbone-v${android.defaultConfig.versionName}.apk"
        }

        /* Assign the new outputFile name, and put the APK in the parent directory (parentFile) of
           the of the default APK (which is Backbone/build/apk)  */
        variant.outputFile = new File(variant.outputFile.parentFile, newName)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}
